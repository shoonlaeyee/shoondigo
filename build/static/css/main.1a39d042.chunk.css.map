{"version":3,"sources":["webpack://src/index.css","webpack://src/App.scss","webpack://node_modules/include-media/dist/_include-media.scss"],"names":[],"mappings":"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","file":"main.1a39d042.chunk.css","sourcesContent":["body {\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n    monospace;\n}\n","@keyframes workDownAnimation{from{transform:rotateX(-15deg) translateY(-30px);opacity:.8}to{transform:rotateX(0deg) translateY(0px);perspective:20px;opacity:1}}.bar1,.bar2,.bar3{width:35px;height:5px;background-color:#f5f5f5;margin:6px 0;transition:.4s}.change .bar1{-webkit-transform:rotate(-45deg) translate(-9px, 6px);transform:rotate(-45deg) translate(-9px, 6px)}.change .bar2{opacity:0}.change .bar3{-webkit-transform:rotate(45deg) translate(-8px, -8px);transform:rotate(45deg) translate(-8px, -8px)}.cdo-header{height:64px;display:flex;justify-content:space-between;align-items:center;padding-top:2em;padding-bottom:2em;padding-left:3em;padding-right:3em}.cdo-header .responsive-toggle{background-color:#3a2837;padding:8px;border-radius:50%;width:36px;height:36px;display:none;z-index:3}.cdo-header .menu-container{display:flex;align-items:center;flex-direction:row;animation:menuContainerAnimation 100ms}@keyframes menuContainerAnimation{from{left:200px;bottom:200px;border-radius:100%}to{left:0px;bottom:0px;border-bottom-left-radius:50%}}.menu-container .item{margin-left:2em;margin-right:2em;font-size:.9em;cursor:pointer;position:relative;padding-bottom:4px;color:#252525;white-space:nowrap}.menu-container .item::after{content:\"\";display:inline-block;position:absolute;left:0;right:0;top:0;bottom:0;width:0%;border-bottom:1px solid #020202;transition:all .2s;-webkit-transition:all .5s}.menu-container .item:hover::after{width:100%}.menu-container .item.selected{text-shadow:0px 0px 1px #000}.request-quote-menu{padding:16px 16px;border-radius:1000px;font-size:.9em;font-weight:300;cursor:pointer;background-color:#3a2837;transition:all .2s;color:#fff;white-space:nowrap}.request-quote-menu:hover{transform:scale(1.04)}.cdo-footer{padding:3em 0em;display:flex;flex-direction:column;justify-content:center;align-items:center;background-color:#f5f5f5}.footer-icon-container{display:flex;justify-content:center;align-items:center}.footer-icon-container .social-icon{width:1.5em;height:1.5em;margin:1em}.footer-quote{font-weight:400;font-size:.9em;text-align:center;line-height:2em}.cdo-work{padding:0px}.cdo-work-heading{padding:2em 6em}.cdo-work-heading .quote-1{font-size:3.6em;color:#020202;font-weight:800;line-height:1.2}.cdo-work-heading .quote-2{font-size:3.6em;color:#d5333e;font-weight:800;line-height:1.2}.cdo-work-category{display:flex;flex-direction:row;padding:2em 6em;transition:all 2s ease-in-out}.cdo-work-category .category{flex-grow:1;display:grid;grid-template-columns:auto auto auto}.cdo-work-category .legend{align-self:flex-end;min-width:200px}.cdo-work-category .legend .title{font-weight:bold;font-size:.8em}.cdo-work-category .legend .container{display:grid;grid-template-columns:auto auto;border-left:1px solid #000;margin-top:16px}.cdo-category-item{padding:.8em 0px;font-weight:400;cursor:pointer;transition:all .2s;-webkit-transition:all .2s}.cdo-category-item::before{border-bottom:3px solid #d5333e;width:0px;content:\"\";display:inline-block;margin-right:4px;transition:all .2s;-webkit-transition:all .2s}.cdo-category-item[active=true]{text-shadow:0px 0px 1px #000}.cdo-category-item[active=true]::before{width:18px}.cdo-legend-item{padding:0px 16px;line-height:2.4;font-size:.8em;display:flex;align-items:center}.cdo-work-product{display:grid}.cdo-work-item{overflow:hidden;height:362px;position:relative;padding:1.6em;display:flex;flex-direction:column;justify-content:space-between;animation:workDownAnimation 1s}.cdo-work-item .background-image{position:absolute;left:0;top:0;right:0;bottom:0;background-position:center center;background-size:cover;z-index:0;transition:all .4s;-webkit-transition:all .4s}.cdo-work-item:hover .background-image{transform-origin:center;transform:scale(1.1)}.cdo-work-item:hover .cdo-work-item-category{color:#fff !important}.cdo-work-item:hover .cdo-work-item-name{color:#fff !important}.cdo-work-item .transparent-bg{position:absolute;left:0;top:0;right:0;bottom:0;background-color:#00000055;opacity:0;z-index:1;transition:all .4s;-webkit-transition:all .4s}.cdo-work-item .transparent-bg:hover{opacity:1}.cdo-work-item .info{z-index:2}.cdo-work-item .apps{display:flex;z-index:2}.cdo-work-item .apps .apps-item{background-color:#fff;width:1.4em;height:1.4em;padding:4px;margin-left:8px;border-radius:50%;display:flex;justify-content:center;align-items:center}.cdo-work-item .apps .apps-item-image{width:1em;height:1em}.cdo-work-contact{padding:2em;background-color:#f5f5f5}.cdo-work-item-category{font-size:.8em;transition:all .4s;-webkit-transition:all .4s}.cdo-work-item-name{font-size:1.4em;font-weight:bold;padding-top:.5em;transition:all .4s;-webkit-transition:all .4s}.work-contact-heading{font-size:2.2em;font-weight:bold;color:#d5333e;text-align:center;padding:1em 0em;padding-bottom:2em}.work-contact-items{display:flex;justify-content:center}.contact-item{cursor:pointer;position:relative;flex:1;padding:0px 24px}.contact-item:not(:first-child){border-left:1px solid #d3d3d3}.contact-item:hover h2{color:#d5333e}.contact-item:hover h2::after{padding-left:32px}.contact-item h2{margin:8px 0px !important;transition:all .2s}.contact-item h2::after{content:\"â†’\";display:inline-block;transition:all .4s;position:absolute;top:4px;padding-left:16px}.contact-item p{color:#252525;font-size:.9em;margin:0px 0px !important}@media(max-width: 768px){.cdo-header .responsive-toggle{display:block;position:absolute;top:46px;right:46px;cursor:pointer}.cdo-header .menu-container{display:none;background-color:#3a2837;flex-direction:column;justify-content:center;align-items:center;position:absolute;top:0px;left:0px;right:0px;bottom:0px;z-index:3;border-bottom-left-radius:40%}.cdo-header .menu-container[toggle-menu=true]{display:flex}.cdo-header .menu-container .item{margin:8px;padding:24px;color:#fff;font-size:1.2em}}@media(max-width: 1024px){.cdo-work-category{flex-direction:column}.cdo-work-category .legend{align-self:flex-start}}@media(max-width: 768px){.cdo-work-heading{padding:1em 4em}.cdo-work-category{display:none}.request-quote-menu{display:none}.work-contact-items{display:flex;justify-content:center;flex-direction:column}.contact-item{padding-bottom:1em;border-bottom:1px solid #d3d3d3}.contact-item:not(:first-child){border-left:none}}","@charset \"UTF-8\";\n\n//     _            _           _                           _ _\n//    (_)          | |         | |                         | (_)\n//     _ _ __   ___| |_   _  __| | ___   _ __ ___   ___  __| |_  __ _\n//    | | '_ \\ / __| | | | |/ _` |/ _ \\ | '_ ` _ \\ / _ \\/ _` | |/ _` |\n//    | | | | | (__| | |_| | (_| |  __/ | | | | | |  __/ (_| | | (_| |\n//    |_|_| |_|\\___|_|\\__,_|\\__,_|\\___| |_| |_| |_|\\___|\\__,_|_|\\__,_|\n//\n//      Simple, elegant and maintainable media queries in Sass\n//                        v1.4.9\n//\n//        https://eduardoboucas.github.io/include-media\n//\n//         Authors: Eduardo Boucas (@eduardoboucas)\n//                  Kitty Giraudel (@kittygiraudel)\n//\n//      This project is licensed under the terms of the MIT license\n////\n/// include-media library public configuration\n/// @author Eduardo Boucas\n/// @access public\n////\n\n\n///\n/// Creates a list of global breakpoints\n///\n/// @example scss - Creates a single breakpoint with the label `phone`\n///  $breakpoints: ('phone': 320px);\n///\n$breakpoints: (\n  'phone': 320px,\n  'tablet': 768px,\n  'desktop': 1024px\n) !default;\n\n\n///\n/// Creates a list of static expressions or media types\n///\n/// @example scss - Creates a single media type (screen)\n///  $media-expressions: ('screen': 'screen');\n///\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\n///  $media-expressions: (\n///    'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)'\n///  );\n///\n$media-expressions: (\n  'screen': 'screen',\n  'print': 'print',\n  'handheld': 'handheld',\n  'landscape': '(orientation: landscape)',\n  'portrait': '(orientation: portrait)',\n  'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx)',\n  'retina3x': '(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi), (min-resolution: 3dppx)'\n) !default;\n\n\n///\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\n///\n/// @example scss - Interval for pixels is defined as `1` by default\n///  @include media('>128px') {}\n///\n///  /* Generates: */\n///  @media (min-width: 129px) {}\n///\n/// @example scss - Interval for ems is defined as `0.01` by default\n///  @include media('>20em') {}\n///\n///  /* Generates: */\n///  @media (min-width: 20.01em) {}\n///\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\n///  @include media('>2.0rem') {}\n///\n///  /* Generates: */\n///  @media (min-width: 2.1rem) {}\n///\n$unit-intervals: (\n  'px': 1,\n  'em': 0.01,\n  'rem': 0.1,\n  '': 0\n) !default;\n\n///\n/// Defines whether support for media queries is available, useful for creating separate stylesheets\n/// for browsers that don't support media queries.\n///\n/// @example scss - Disables support for media queries\n///  $im-media-support: false;\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n$im-media-support: true !default;\n\n///\n/// Selects which breakpoint to emulate when support for media queries is disabled. Media queries that start at or\n/// intercept the breakpoint will be displayed, any others will be ignored.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n/// @example scss - This media query will NOT show because it does not intercept the desktop breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'tablet';\n///  @include media('>=desktop') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-breakpoint: 'desktop' !default;\n\n///\n/// Selects which media expressions are allowed in an expression for it to be used when media queries\n/// are not supported.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint and contains only accepted media expressions\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'screen') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///   /* Generates: */\n///   .foo {\n///     color: tomato;\n///   }\n///\n/// @example scss - This media query will NOT show because it intercepts the static breakpoint but contains a media expression that is not accepted\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'retina2x') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-expressions: ('screen', 'portrait', 'landscape') !default;\n\n////\n/// Cross-engine logging engine\n/// @author Kitty Giraudel\n/// @access private\n////\n\n\n///\n/// Log a message either with `@error` if supported\n/// else with `@warn`, using `feature-exists('at-error')`\n/// to detect support.\n///\n/// @param {String} $message - Message to log\n///\n@function im-log($message) {\n  @if feature-exists('at-error') {\n    @error $message;\n  } @else {\n    @warn $message;\n    $_: noop();\n  }\n\n  @return $message;\n}\n\n\n///\n/// Wrapper mixin for the log function so it can be used with a more friendly\n/// API than `@if im-log('..') {}` or `$_: im-log('..')`. Basically, use the function\n/// within functions because it is not possible to include a mixin in a function\n/// and use the mixin everywhere else because it's much more elegant.\n///\n/// @param {String} $message - Message to log\n///\n@mixin log($message) {\n  @if im-log($message) {}\n}\n\n\n///\n/// Function with no `@return` called next to `@warn` in Sass 3.3\n/// to trigger a compiling error and stop the process.\n///\n@function noop() {}\n\n///\n/// Determines whether a list of conditions is intercepted by the static breakpoint.\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @return {Boolean} - Returns true if the conditions are intercepted by the static breakpoint\n///\n@function im-intercepts-static-breakpoint($conditions...) {\n  $no-media-breakpoint-value: map-get($breakpoints, $im-no-media-breakpoint);\n\n  @if not $no-media-breakpoint-value {\n    @if im-log('`#{$im-no-media-breakpoint}` is not a valid breakpoint.') {}\n  }\n\n  @each $condition in $conditions {\n    @if not map-has-key($media-expressions, $condition) {\n      $operator: get-expression-operator($condition);\n      $prefix: get-expression-prefix($operator);\n      $value: get-expression-value($condition, $operator);\n\n      @if ($prefix == 'max' and $value <= $no-media-breakpoint-value) or\n          ($prefix == 'min' and $value > $no-media-breakpoint-value) {\n        @return false;\n      }\n    } @else if not index($im-no-media-expressions, $condition) {\n      @return false;\n    }\n  }\n\n  @return true;\n}\n\n////\n/// Parsing engine\n/// @author Kitty Giraudel\n/// @access private\n////\n\n\n///\n/// Get operator of an expression\n///\n/// @param {String} $expression - Expression to extract operator from\n///\n/// @return {String} - Any of `>=`, `>`, `<=`, `<`, `â‰¥`, `â‰¤`\n///\n@function get-expression-operator($expression) {\n  @each $operator in ('>=', '>', '<=', '<', 'â‰¥', 'â‰¤') {\n    @if str-index($expression, $operator) {\n      @return $operator;\n    }\n  }\n\n  // It is not possible to include a mixin inside a function, so we have to\n  // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\n  // functions cannot be called anywhere in Sass, we need to hack the call in\n  // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n  // Sass 3.3, change this line in `@if im-log(..) {}` instead.\n  $_: im-log('No operator found in `#{$expression}`.');\n}\n\n\n///\n/// Get dimension of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract dimension from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {String} - `width` or `height` (or potentially anything else)\n///\n@function get-expression-dimension($expression, $operator) {\n  $operator-index: str-index($expression, $operator);\n  $parsed-dimension: str-slice($expression, 0, $operator-index - 1);\n  $dimension: 'width';\n\n  @if str-length($parsed-dimension) > 0 {\n    $dimension: $parsed-dimension;\n  }\n\n  @return $dimension;\n}\n\n\n///\n/// Get dimension prefix based on an operator\n///\n/// @param {String} $operator - Operator\n///\n/// @return {String} - `min` or `max`\n///\n@function get-expression-prefix($operator) {\n  @return if(index(('<', '<=', 'â‰¤'), $operator), 'max', 'min');\n}\n\n\n///\n/// Get value of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract value from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {Number} - A numeric value\n///\n@function get-expression-value($expression, $operator) {\n  $operator-index: str-index($expression, $operator);\n  $value: str-slice($expression, $operator-index + str-length($operator));\n\n  @if map-has-key($breakpoints, $value) {\n    $value: map-get($breakpoints, $value);\n  } @else {\n    $value: to-number($value);\n  }\n\n  $interval: map-get($unit-intervals, unit($value));\n\n  @if not $interval {\n    // It is not possible to include a mixin inside a function, so we have to\n    // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\n    // functions cannot be called anywhere in Sass, we need to hack the call in\n    // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n    // Sass 3.3, change this line in `@if im-log(..) {}` instead.\n    $_: im-log('Unknown unit `#{unit($value)}`.');\n  }\n\n  @if $operator == '>' {\n    $value: $value + $interval;\n  } @else if $operator == '<' {\n    $value: $value - $interval;\n  }\n\n  @return $value;\n}\n\n\n///\n/// Parse an expression to return a valid media-query expression\n///\n/// @param {String} $expression - Expression to parse\n///\n/// @return {String} - Valid media query\n///\n@function parse-expression($expression) {\n  // If it is part of $media-expressions, it has no operator\n  // then there is no need to go any further, just return the value\n  @if map-has-key($media-expressions, $expression) {\n    @return map-get($media-expressions, $expression);\n  }\n\n  $operator: get-expression-operator($expression);\n  $dimension: get-expression-dimension($expression, $operator);\n  $prefix: get-expression-prefix($operator);\n  $value: get-expression-value($expression, $operator);\n\n  @return '(#{$prefix}-#{$dimension}: #{$value})';\n}\n\n///\n/// Slice `$list` between `$start` and `$end` indexes\n///\n/// @access private\n///\n/// @param {List} $list - List to slice\n/// @param {Number} $start [1] - Start index\n/// @param {Number} $end [length($list)] - End index\n///\n/// @return {List} Sliced list\n///\n@function slice($list, $start: 1, $end: length($list)) {\n  @if length($list) < 1 or $start > $end {\n    @return ();\n  }\n\n  $result: ();\n\n  @for $i from $start through $end {\n    $result: append($result, nth($list, $i));\n  }\n\n  @return $result;\n}\n\n////\n/// String to number converter\n/// @author Kitty Giraudel\n/// @access private\n////\n\n\n///\n/// Casts a string into a number\n///\n/// @param {String | Number} $value - Value to be parsed\n///\n/// @return {Number}\n///\n@function to-number($value) {\n  @if type-of($value) == 'number' {\n    @return $value;\n  } @else if type-of($value) != 'string' {\n    $_: im-log('Value for `to-number` should be a number or a string.');\n  }\n\n  $first-character: str-slice($value, 1, 1);\n  $result: 0;\n  $digits: 0;\n  $minus: ($first-character == '-');\n  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);\n\n  // Remove +/- sign if present at first character\n  @if ($first-character == '+' or $first-character == '-') {\n    $value: str-slice($value, 2);\n  }\n\n  @for $i from 1 through str-length($value) {\n    $character: str-slice($value, $i, $i);\n\n    @if not (index(map-keys($numbers), $character) or $character == '.') {\n      @return to-length(if($minus, -$result, $result), str-slice($value, $i))\n    }\n\n    @if $character == '.' {\n      $digits: 1;\n    } @else if $digits == 0 {\n      $result: $result * 10 + map-get($numbers, $character);\n    } @else {\n      $digits: $digits * 10;\n      $result: $result + map-get($numbers, $character) / $digits;\n    }\n  }\n\n  @return if($minus, -$result, $result);\n}\n\n\n///\n/// Add `$unit` to `$value`\n///\n/// @param {Number} $value - Value to add unit to\n/// @param {String} $unit - String representation of the unit\n///\n/// @return {Number} - `$value` expressed in `$unit`\n///\n@function to-length($value, $unit) {\n  $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);\n\n  @if not index(map-keys($units), $unit) {\n    $_: im-log('Invalid unit `#{$unit}`.');\n  }\n\n  @return $value * map-get($units, $unit);\n}\n\n///\n/// This mixin aims at redefining the configuration just for the scope of\n/// the call. It is helpful when having a component needing an extended\n/// configuration such as custom breakpoints (referred to as tweakpoints)\n/// for instance.\n///\n/// @author Kitty Giraudel\n///\n/// @param {Map} $tweakpoints [()] - Map of tweakpoints to be merged with `$breakpoints`\n/// @param {Map} $tweak-media-expressions [()] - Map of tweaked media expressions to be merged with `$media-expression`\n///\n/// @example scss - Extend the global breakpoints with a tweakpoint\n///  @include media-context(('custom': 678px)) {\n///    .foo {\n///      @include media('>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend the global media expressions with a custom one\n///  @include media-context($tweak-media-expressions: ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend both configuration maps\n///  @include media-context(('custom': 678px), ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n@mixin media-context($tweakpoints: (), $tweak-media-expressions: ()) {\n  // Save global configuration\n  $global-breakpoints: $breakpoints;\n  $global-media-expressions: $media-expressions;\n\n  // Update global configuration\n  $breakpoints: map-merge($breakpoints, $tweakpoints) !global;\n  $media-expressions: map-merge($media-expressions, $tweak-media-expressions) !global;\n\n  @content;\n\n  // Restore global configuration\n  $breakpoints: $global-breakpoints !global;\n  $media-expressions: $global-media-expressions !global;\n}\n\n////\n/// include-media public exposed API\n/// @author Eduardo Boucas\n/// @access public\n////\n\n\n///\n/// Generates a media query based on a list of conditions\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @example scss - With a single set breakpoint\n///  @include media('>phone') { }\n///\n/// @example scss - With two set breakpoints\n///  @include media('>phone', '<=tablet') { }\n///\n/// @example scss - With custom values\n///  @include media('>=358px', '<850px') { }\n///\n/// @example scss - With set breakpoints with custom values\n///  @include media('>desktop', '<=1350px') { }\n///\n/// @example scss - With a static expression\n///  @include media('retina2x') { }\n///\n/// @example scss - Mixing everything\n///  @include media('>=350px', '<tablet', 'retina3x') { }\n///\n@mixin media($conditions...) {\n  @if ($im-media-support and length($conditions) == 0) or\n      (not $im-media-support and im-intercepts-static-breakpoint($conditions...)) {\n    @content;\n  } @else if ($im-media-support and length($conditions) > 0) {\n    @media #{unquote(parse-expression(nth($conditions, 1)))} {\n      // Recursive call\n      @include media(slice($conditions, 2)...) {\n        @content;\n      }\n    }\n  }\n}\n"]}